@page "/dashboard/mafia/{id}"
@using GameMaster.Shared.Mafia
@using GameMaster.Shared
@using GameMaster.Bot.Services.Mafia
@using Discord
@implements IDisposable
@inject DataService Data
@inject MafiaControlService ControlService

@if (Ready)
{
    <button class="px-2 py-1 bg-red-500 rounded-sm hover:bg-indigo-500 float-right inline-flex items-center font-semibold">End Game</button>
    <h1 class="text-2xl font-bold mb-2">@Game.Name</h1>
    <div class="mb-2">
        <h3 class="text-xl font-bold">Players</h3>
        <ul>
            @if (_resolvedPlayers.Count > 0)
            {
                @foreach (var player in _resolvedPlayers)
                {
                    <li>@player.DisplayName</li>
                }
            }
            else
            {
                <p><i>None yet...</i></p>
            }
        </ul>
    </div>
    <div class="mb-2">
        <h3 class="text-xl font-bold">Day Chat Status</h3>
        <p class="mb-1">@Game.ChatStatus</p>
        @if (Game.ChatStatus == MafiaGame.GameChatStatus.NotCreated)
        {
            <button @onclick="CreateDayChat" disabled="@_waitingForChannelAction" class="px-2 py-1 bg-indigo-700 rounded-sm hover:bg-indigo-500 inline-flex items-center">Create Day Chat</button>
        }
        else
        {
            if (Game.ChatStatus != MafiaGame.GameChatStatus.Open)
            {
                <button @onclick="OpenDayChat" disabled="@_waitingForChannelAction" class="px-2 py-1 bg-indigo-700 rounded-sm hover:bg-indigo-500 inline-flex items-center">Open Day Chat</button>
            }
            if (Game.ChatStatus != MafiaGame.GameChatStatus.Closed)
            {
                <button @onclick="CloseDayChat" disabled="@_waitingForChannelAction" class="px-2 py-1 bg-indigo-700 rounded-sm hover:bg-indigo-500 inline-flex items-center">Close Day Chat</button>
            }
        }
    </div>
}
else if (NotFound)
{
    <p>That mafia game doesn't exist.</p>
}
else
{
    <p>Loading details... Please wait.</p>
}

@code {
    [Parameter]
    public string Id { get; set; } = string.Empty;

    private MafiaGame Game { get; set; } = new();
    private bool Ready { get; set; } = false;
    private bool NotFound { get; set; } = false;

    private List<IGuildUser> _resolvedPlayers = new();
    private bool _waitingForChannelAction = false;

    protected override void OnInitialized()
    {
        RefreshGame();
        DoExtra();
        
        Game.Updated += GameUpdated;
    }

    private void DoExtra()
    {
        _resolvedPlayers.Clear();
        _resolvedPlayers = ControlService.GetResolvedPlayerList(Game.Id);
    }
    
    private async void GameUpdated()
    {
        DoExtra();
        await InvokeAsync(StateHasChanged);
    }

    private void RefreshGame()
    {
        var temp = Data.GetMafiaGame(Id);

        if (temp is null)
        {
            NotFound = true;
            return;
        }

        Game = temp;
        Ready = true;
    }

    private async Task CreateDayChat()
    {
        _waitingForChannelAction = true;
        await ControlService.CreateDayChat(Game.ControlPanel);
        RefreshGame();
        _waitingForChannelAction = false;
    }

    private async Task OpenDayChat()
    {
        _waitingForChannelAction = true;
        await ControlService.SetDayChat(Game.ControlPanel, "open");
        _waitingForChannelAction = false;
    }
    
    private async Task CloseDayChat()
    {
        _waitingForChannelAction = true;
        await ControlService.SetDayChat(Game.ControlPanel, "closed");
        _waitingForChannelAction = false;
    }

    public void Dispose()
    {
        Game.Updated -= GameUpdated;
    }

}